#!/bin/bash

# Interactive MongoDB setup script for batchwriter tests
# This runs OUTSIDE of tests to configure the environment

echo "=== BatchWriter MongoDB Test Configuration ==="
echo ""
echo "This script will help you configure MongoDB for testing."
echo "You can run it once, then use 'go test ./...' normally."
echo ""

# Check if MongoDB is already configured
if [ -n "$MONGO_HOST" ] || [ -n "$MONGO_PORT" ] || [ -n "$MONGO_USERNAME" ]; then
    echo "Existing MongoDB configuration detected:"
    echo "  MONGO_HOST: ${MONGO_HOST:-localhost}"
    echo "  MONGO_PORT: ${MONGO_PORT:-27017}"
    echo "  MONGO_USERNAME: ${MONGO_USERNAME}"
    echo ""
    read -p "Do you want to reconfigure? (y/N): " reconfigure
    if [[ ! "$reconfigure" =~ ^[Yy]$ ]]; then
        echo "Using existing configuration."
        exit 0
    fi
fi

echo ""
echo "Choose your MongoDB setup:"
echo "1. Local Docker (recommended)"
echo "2. Local MongoDB installation"
echo "3. Remote MongoDB server"
echo "4. MongoDB Atlas"
echo "5. Custom configuration"
echo ""

read -p "Select option (1-5): " choice

case $choice in
    1)
        echo ""
        echo "Setting up for local Docker MongoDB..."
        read -p "Username: " username
        read -s -p "Password: " password
        echo "Make sure you have MongoDB running with:"
        echo "  docker run -d --name mongo-test -p 27017:27017 \\"
        echo "    -e MONGO_INITDB_ROOT_USERNAME=${username} \\"
        echo "    -e MONGO_INITDB_ROOT_PASSWORD=${password} mongo:7"
        echo ""
        
        # Set defaults for Docker
        export MONGO_HOST=localhost
        export MONGO_PORT=27017
        export MONGO_USERNAME=${username}
        export MONGO_PASSWORD=${password}
        ;;
    2)
        echo ""
        echo "Setting up for local MongoDB installation..."
        read -p "MongoDB host (default: localhost): " host
        read -p "MongoDB port (default: 27017): " port
        read -p "Username (leave empty if no auth): " username
        if [ -n "$username" ]; then
            read -s -p "Password: " password
            echo ""
        fi
        
        export MONGO_HOST=${host:-localhost}
        export MONGO_PORT=${port:-27017}
        export MONGO_USERNAME=${username}
        export MONGO_PASSWORD=${password}
        ;;
    3)
        echo ""
        echo "Setting up for remote MongoDB server..."
        read -p "MongoDB host: " host
        read -p "MongoDB port (default: 27017): " port
        read -p "Username: " username
        read -s -p "Password: " password
        echo ""
        
        export MONGO_HOST=${host}
        export MONGO_PORT=${port:-27017}
        export MONGO_USERNAME=${username}
        export MONGO_PASSWORD=${password}
        ;;
    4)
        echo ""
        echo "Setting up for MongoDB Atlas..."
        echo "Example: cluster0.mongodb.net"
        read -p "Atlas cluster host: " host
        read -p "Username: " username
        read -s -p "Password: " password
        echo ""
        
        export MONGO_HOST=${host}
        export MONGO_PORT=27017
        export MONGO_USERNAME=${username}
        export MONGO_PASSWORD=${password}
        ;;
    5)
        echo ""
        echo "Custom configuration..."
        read -p "MongoDB host: " host
        read -p "MongoDB port: " port
        read -p "Username: " username
        read -s -p "Password: " password
        echo ""
        read -p "Auth database (default: admin): " authdb
        
        export MONGO_HOST=${host}
        export MONGO_PORT=${port}
        export MONGO_USERNAME=${username}
        export MONGO_PASSWORD=${password}
        export MONGO_AUTH_DATABASE=${authdb:-admin}
        ;;
    *)
        echo "Invalid choice. Exiting."
        exit 1
        ;;
esac

# Save to .env file for persistence
echo ""
echo "Saving configuration to .env file..."
cat > .env << EOF
# MongoDB configuration for batchwriter tests
# Generated by setup-mongo.sh
MONGO_HOST=${MONGO_HOST}
MONGO_PORT=${MONGO_PORT}
MONGO_USERNAME=${MONGO_USERNAME}
MONGO_PASSWORD=${MONGO_PASSWORD}
MONGO_AUTH_DATABASE=${MONGO_AUTH_DATABASE:-admin}
EOF

echo ""
echo "Configuration saved! The tests will automatically load the .env file."
echo "You can now run tests with:"
echo "  go test ./..."
echo ""
echo "Or use environment variables directly:"
echo "  MONGO_HOST=${MONGO_HOST} MONGO_PORT=${MONGO_PORT} go test ./..."
echo ""

# Test the connection
echo "Testing MongoDB connection..."
if go test -run="TestDumpFailed" ./... >/dev/null 2>&1; then
    echo "✓ MongoDB connection successful!"
    echo "✓ Tests can now access the .env configuration automatically."
else
    echo "✗ MongoDB connection failed. Please check your configuration."
    echo "  The .env file has been created, but the connection test failed."
    echo "  Make sure MongoDB is running and accessible with these settings."
fi
